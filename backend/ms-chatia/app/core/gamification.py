"""
Servi√ßo de gamifica√ß√£o do sistema FaleComJesus.

Este m√≥dulo implementa o sistema de gamifica√ß√£o que incentiva
e recompensa o engajamento dos usu√°rios na plataforma.

Features:
    - Pontos por atividades
    - Conquistas e selos
    - N√≠veis de progresso
    - Recompensas di√°rias
    - Rankings semanais
    - Certificados especiais
"""

from typing import Dict, List, Optional, Union
import logging
from datetime import datetime, timedelta
from .config import settings
from .cache import cache
from .metrics import metrics
from .database import db

# Logger
logger = logging.getLogger(__name__)


class GamificationManager:
    """
    Gerenciador de gamifica√ß√£o.

    Features:
        - Pontua√ß√£o
        - Conquistas
        - N√≠veis
        - Recompensas
        - Rankings

    Attributes:
        points_per_activity: Pontos por atividade
        achievements: Lista de conquistas
        levels: N√≠veis de progresso
        metrics: M√©tricas de gamifica√ß√£o
    """

    def __init__(
        self,
        points_per_activity: Optional[Dict] = None,
        achievements: Optional[List] = None,
        levels: Optional[List] = None
    ):
        """
        Inicializa o gerenciador de gamifica√ß√£o.

        Args:
            points_per_activity: Pontos por atividade
            achievements: Lista de conquistas
            levels: N√≠veis de progresso
        """
        # Configura√ß√µes
        self.points_per_activity = points_per_activity or {
            "study_completed": 100,
            "reflection_added": 50,
            "chat_message": 10,
            "daily_login": 20,
            "certificate_earned": 200
        }

        self.achievements = achievements or [
            {
                "id": "first_study",
                "name": "Primeiro Passo",
                "description": "Complete seu primeiro estudo",
                "points": 100,
                "icon": "üéØ"
            },
            {
                "id": "seven_days",
                "name": "Const√¢ncia",
                "description": "Estude por 7 dias consecutivos",
                "points": 500,
                "icon": "üî•"
            },
            {
                "id": "master",
                "name": "Mestre",
                "description": "Complete 10 planos de estudo",
                "points": 1000,
                "icon": "üëë"
            }
        ]

        self.levels = levels or [
            {"level": 1, "points": 0, "name": "Iniciante"},
            {"level": 2, "points": 500, "name": "Aprendiz"},
            {"level": 3, "points": 1000, "name": "Disc√≠pulo"},
            {"level": 4, "points": 2000, "name": "Mestre"},
            {"level": 5, "points": 5000, "name": "S√°bio"}
        ]

        logger.info("Gerenciador de gamifica√ß√£o inicializado")

    async def add_points(
        self,
        user_id: str,
        activity: str,
        points: Optional[int] = None
    ) -> Dict:
        """
        Adiciona pontos por atividade.

        Args:
            user_id: ID do usu√°rio
            activity: Tipo de atividade
            points: Pontos (opcional)

        Returns:
            Dict: Resultado da pontua√ß√£o
        """
        try:
            # Valida atividade
            if activity not in self.points_per_activity:
                raise ValueError(f"Atividade inv√°lida: {activity}")

            # Pontos da atividade
            activity_points = points or self.points_per_activity[activity]

            # Adiciona pontos
            result = await self._add_points_to_user(
                user_id,
                activity_points
            )

            # Verifica conquistas
            await self._check_achievements(user_id)

            # Registra m√©tricas
            metrics.track_gamification(
                "points_added",
                activity=activity,
                points=activity_points
            )

            return result

        except Exception as e:
            logger.error(f"Erro ao adicionar pontos: {str(e)}")
            raise

    async def get_achievements(
        self,
        user_id: str
    ) -> List[Dict]:
        """
        Retorna conquistas do usu√°rio.

        Args:
            user_id: ID do usu√°rio

        Returns:
            List[Dict]: Lista de conquistas
        """
        try:
            # Busca conquistas
            achievements = await self._get_user_achievements(user_id)

            # Formata resultado
            result = []
            for achievement in self.achievements:
                result.append({
                    **achievement,
                    "earned": achievement["id"] in achievements
                })

            return result

        except Exception as e:
            logger.error(f"Erro ao buscar conquistas: {str(e)}")
            return []

    async def get_level(
        self,
        user_id: str
    ) -> Dict:
        """
        Retorna n√≠vel atual do usu√°rio.

        Args:
            user_id: ID do usu√°rio

        Returns:
            Dict: Dados do n√≠vel
        """
        try:
            # Busca pontos
            points = await self._get_user_points(user_id)

            # Calcula n√≠vel
            current_level = None
            next_level = None

            for i, level in enumerate(self.levels):
                if points >= level["points"]:
                    current_level = level
                    if i < len(self.levels) - 1:
                        next_level = self.levels[i + 1]

            return {
                "current": current_level,
                "next": next_level,
                "points": points,
                "progress": self._calculate_progress(
                    points,
                    current_level,
                    next_level
                )
            }

        except Exception as e:
            logger.error(f"Erro ao calcular n√≠vel: {str(e)}")
            return {
                "current": self.levels[0],
                "next": self.levels[1],
                "points": 0,
                "progress": 0
            }

    async def get_weekly_ranking(
        self,
        limit: int = 10
    ) -> List[Dict]:
        """
        Retorna ranking semanal.

        Args:
            limit: Limite de usu√°rios

        Returns:
            List[Dict]: Lista de usu√°rios
        """
        try:
            # Busca ranking
            ranking = await self._get_weekly_ranking(limit)

            # Formata resultado
            result = []
            for i, user in enumerate(ranking, 1):
                result.append({
                    "position": i,
                    "user_id": user["user_id"],
                    "user_name": user["user_name"],
                    "points": user["points"],
                    "level": await self.get_level(user["user_id"])
                })

            return result

        except Exception as e:
            logger.error(f"Erro ao buscar ranking: {str(e)}")
            return []

    async def _add_points_to_user(
        self,
        user_id: str,
        points: int
    ) -> Dict:
        """
        Adiciona pontos ao usu√°rio.

        Args:
            user_id: ID do usu√°rio
            points: Pontos

        Returns:
            Dict: Resultado
        """
        try:
            # Busca pontos atuais
            current_points = await self._get_user_points(user_id)

            # Adiciona pontos
            new_points = current_points + points

            # Atualiza no banco
            await self._update_user_points(
                user_id,
                new_points
            )

            return {
                "user_id": user_id,
                "points_added": points,
                "total_points": new_points
            }

        except Exception as e:
            logger.error(f"Erro ao atualizar pontos: {str(e)}")
            raise

    async def _check_achievements(
        self,
        user_id: str
    ) -> List[Dict]:
        """
        Verifica conquistas do usu√°rio.

        Args:
            user_id: ID do usu√°rio

        Returns:
            List[Dict]: Conquistas desbloqueadas
        """
        try:
            # Busca conquistas atuais
            current = await self._get_user_achievements(user_id)

            # Verifica novas conquistas
            new_achievements = []

            for achievement in self.achievements:
                if achievement["id"] not in current:
                    # Verifica crit√©rios
                    if await self._check_achievement_criteria(
                        user_id,
                        achievement
                    ):
                        # Desbloqueia conquista
                        await self._unlock_achievement(
                            user_id,
                            achievement
                        )

                        new_achievements.append(achievement)

            return new_achievements

        except Exception as e:
            logger.error(f"Erro ao verificar conquistas: {str(e)}")
            return []

    async def _check_achievement_criteria(
        self,
        user_id: str,
        achievement: Dict
    ) -> bool:
        """
        Verifica crit√©rios da conquista.

        Args:
            user_id: ID do usu√°rio
            achievement: Dados da conquista

        Returns:
            bool: True se atende crit√©rios
        """
        try:
            # Crit√©rios por conquista
            criteria = {
                "first_study": lambda: self._check_first_study(user_id),
                "seven_days": lambda: self._check_streak(user_id, 7),
                "master": lambda: self._check_completed_plans(user_id, 10)
            }

            # Verifica crit√©rio
            if achievement["id"] in criteria:
                return await criteria[achievement["id"]]()

            return False

        except Exception as e:
            logger.error(f"Erro ao verificar crit√©rios: {str(e)}")
            return False

    def _calculate_progress(
        self,
        points: int,
        current_level: Dict,
        next_level: Optional[Dict]
    ) -> float:
        """
        Calcula progresso para pr√≥ximo n√≠vel.

        Args:
            points: Pontos atuais
            current_level: N√≠vel atual
            next_level: Pr√≥ximo n√≠vel

        Returns:
            float: Progresso (0-100)
        """
        try:
            if not next_level:
                return 100

            # Pontos necess√°rios
            points_needed = next_level["points"] - current_level["points"]
            points_current = points - current_level["points"]

            # Calcula porcentagem
            return (points_current / points_needed) * 100

        except Exception as e:
            logger.error(f"Erro ao calcular progresso: {str(e)}")
            return 0


# Inst√¢ncia global de gamifica√ß√£o
gamification = GamificationManager()
