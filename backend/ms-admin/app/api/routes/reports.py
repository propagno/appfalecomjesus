from fastapi import APIRouter, Depends, HTTPException, status, Path, Body, Response
from typing import Optional, List

from app.services.report_service import ReportService
from app.schemas.report import (
    ReportJobRequest,
    ReportJobResponse,
    ReportInfo,
    ReportListResponse
)
from app.api.deps import get_current_admin_user

router = APIRouter()


@router.post("/generate", response_model=ReportJobResponse)
async def generate_report(
    report_data: ReportJobRequest = Body(...,
                                         description="Report configuration"),
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Generate a new report.

    This endpoint initiates the generation of a report based on specified parameters.
    The report will be generated asynchronously and can be downloaded once complete.
    """
    return await ReportService.generate_report(
        report_data=report_data,
        admin_id=current_user["id"]
    )


@router.get("/status/{job_id}", response_model=ReportJobResponse)
async def check_report_status(
    job_id: str = Path(..., description="The ID of the report job to check"),
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Check the status of a report generation job.

    This endpoint returns the current status of a specific report generation job.
    """
    return await ReportService.check_report_status(job_id)


@router.get("/", response_model=ReportListResponse)
async def list_reports(
    current_user: dict = Depends(get_current_admin_user)
):
    """
    List all available reports.

    This endpoint returns a list of all completed reports available for download.
    """
    return await ReportService.list_reports()


@router.get("/{report_id}", response_model=ReportInfo)
async def get_report_details(
    report_id: str = Path(..., description="The ID of the report to retrieve"),
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Get detailed information about a specific report.

    This endpoint returns information about a report, including type, date range, and download link.
    """
    return await ReportService.get_report(report_id)


@router.delete("/{report_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_report(
    report_id: str = Path(..., description="The ID of the report to delete"),
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Delete a report.

    This endpoint removes a report from the system. This operation cannot be undone.
    """
    await ReportService.delete_report(report_id)
    return None


@router.get("/download/{report_id}")
async def download_report(
    report_id: str = Path(..., description="The ID of the report to download"),
    current_user: dict = Depends(get_current_admin_user)
):
    """
    Download a report file.

    This endpoint streams the report file for download.
    In a real implementation, this would stream a PDF, CSV, or Excel file.
    """
    # Check if report exists
    report = await ReportService.get_report(report_id)

    # In a real implementation, we would check if the file exists and stream it
    # For mock purposes, we'll just return a text response

    # Generate a mock report content based on the type
    content = f"--- {report.type.upper()} REPORT ---\n\n"
    content += f"Date Range: {report.date_range['start']} to {report.date_range['end']}\n"
    content += f"Generated by: {report.created_by}\n"
    content += f"Generated at: {report.created_at}\n\n"

    if report.type == "user_activity":
        content += "ACTIVE USERS: 1,254\n"
        content += "NEW SIGNUPS: 342\n"
        content += "RETENTION RATE: 78%\n"
    elif report.type == "study_progress":
        content += "COMPLETED STUDIES: 879\n"
        content += "AVERAGE COMPLETION RATE: 67%\n"
        content += "MOST POPULAR STUDY: 'Paz Interior com Jo√£o'\n"
    elif report.type == "chat_usage":
        content += "TOTAL MESSAGES: 23,456\n"
        content += "AVERAGE MESSAGES PER USER: 18.7\n"
        content += "PEAK USAGE TIME: 8:00 PM - 10:00 PM\n"
    elif report.type == "system_performance":
        content += "AVERAGE RESPONSE TIME: 235ms\n"
        content += "API ERROR RATE: 0.2%\n"
        content += "SERVER UPTIME: 99.98%\n"
    elif report.type == "financial":
        content += "TOTAL REVENUE: $12,345.67\n"
        content += "NEW SUBSCRIPTIONS: 156\n"
        content += "CHURN RATE: 3.2%\n"

    # Return as text file
    return Response(
        content=content,
        media_type="text/plain",
        headers={
            "Content-Disposition": f"attachment; filename=report-{report.type}-{report.id}.txt"
        }
    )
